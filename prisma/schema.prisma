// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  items         Item[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                       String   @id @default(cuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_in               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Item {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String?
  url         String?
  thumbnail   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  blog        Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id        Int      @id @default(autoincrement())
  domain    String   @unique
  name      String
  favicon   String?
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
